<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rbac on kelvinji2009</title>
    <link>https://kelvinji2009.github.io/tags/rbac/</link>
    <description>Recent content in Rbac on kelvinji2009</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 04 Nov 2018 16:14:23 +0800</lastBuildDate>
    
	<atom:link href="https://kelvinji2009.github.io/tags/rbac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuring Permissions in Kubernetes With RBAC</title>
      <link>https://kelvinji2009.github.io/blog/configuring-permissions-in-kubernetes-with-rbac/</link>
      <pubDate>Sun, 04 Nov 2018 16:14:23 +0800</pubDate>
      
      <guid>https://kelvinji2009.github.io/blog/configuring-permissions-in-kubernetes-with-rbac/</guid>
      <description>Configuring permissions in Kubernetes with RBAC 原文
确保控制谁有权访问您的信息系统以及用户可以访问的内容是身份和访问管理系统的目标。 它是安全管理的基本流程之一，应该彻底解决。
在 Kubernetes 中，身份和用户管理未集成在平台中，应由外部 IAM 平台（如 Keycloak，Active Directory，Google 的 IAM 等）进行管理。但是，身份验证和授权由 Kubernetes 处理。
在本文中，我们将重点关注 Kubernetes 中 IAM 的授权方面，更具体地说，关于如何使用基于角色的访问控制模型确保用户对相应的资源具有正确的权限。
先决条件 RBAC 是 Kubernetes 1.8 的稳定功能。 在本文中，我们假设您使用的是 Kubernetes 1.9+。 我们还假设您的集群中已通过 Kubernetes API 服务器中的--authorization-mode = RBAC选项启用了 RBAC。 您可以通过执行命令kubectl api-versions来检查这一点; 如果启用了 RBAC，您应该看到 API 版本.rbac.authorization.k8s.io/v1。
RBAC 核心内容概览 Kubernetes 中的 RBAC 模型基于三个要素：
 Roles：定义每个 Kubernetes 资源类型的权限 Subjects：用户（人或机器用户）或用户组 RoleBindings：定义哪些 subjects 具有哪些 roles  让我们来探索这些元素是如何工作的。
在下面的示例中，您可以看到一个允许在命名空间“mynamespace”中获取，列出和监视 pod 的角色：
kind: Role apiVersion: rbac.</description>
    </item>
    
  </channel>
</rss>