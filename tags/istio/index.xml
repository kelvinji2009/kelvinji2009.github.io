<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Istio on kelvinji2009</title>
    <link>https://kelvinji2009.github.io/tags/istio/</link>
    <description>Recent content in Istio on kelvinji2009</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 05 Nov 2018 11:45:10 +0800</lastBuildDate>
    
	<atom:link href="https://kelvinji2009.github.io/tags/istio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Istio Routing 极简教程</title>
      <link>https://kelvinji2009.github.io/blog/istio-routing-basics/</link>
      <pubDate>Mon, 05 Nov 2018 11:45:10 +0800</pubDate>
      
      <guid>https://kelvinji2009.github.io/blog/istio-routing-basics/</guid>
      <description>Istio Routing 极简教程 原文
在学习像 Istio 这样的新技术时，看一下示例应用程序总是一个好主意。 Istio repo 有一些示例应用程序，但它们似乎有各种不足。 文档中的 BookInfo 是一个很好的示例。 但是，对于我而言，它太冗长，服务太多，而且文档似乎专注于管理 BookInfo 应用程序，而不是从头开始构建。 有一个较小的 helloworld 例子，但它更多的是关于自动伸缩而不是其他。
在这篇文章中，我想介绍一下基础知识，并向您展示如何从头开始构建支持 Istio 的“HelloWorld”应用程序。 要记住的一点是，Istio 只管理您应用的流量。 在这种情况下，应用程序生命周期由底层平台 Kubernetes 管理。 因此，您需要了解容器和 Kubernetes 基础知识，并且需要了解 Istio Routing 原语，例如 Gateway，VirtualService，DestinationRule。 我假设大多数人都知道容器和 Kubernetes 基础知识。 我将在本文中专注于 Istio Routing。
基础步骤 以下这些大致就是您需要遵循的，以获得 Istio 的“HelloWorld”应用程序的步骤：
 创建一个 Kubernetes 集群并安装带有 sidecare 自动注入的 Istio。 使用您选择的语言创建 Hello World 应用程序，创建 Docker 镜像并将其推送到公共镜像仓库。 为你的容器创建 Kubernetes deployment 和 service。 创建 Gateway 以启用到群集的 HTTP(S)流量。 创建 VirtualService,通过 Gateway 公开 Kubernetes 服务。 （可选）如果要创建多个版本应用程序，请创建 DestinationRule 以定义可从 VirtualService 引用的 subsets。 （可选）如果要在服务网格外部调用其他外部服务，请创建 ServiceEntry。  我不会在本文中介绍步骤 1 和 2，因为它们不是特定于 Istio 的。 如果您需要有关这些步骤的帮助，可以查看我在本文末尾提到的文章。 第 3 步也不是 Istio 特定的，但它是其他一切的先决条件，所以让我们从那开始。</description>
    </item>
    
    <item>
      <title>为何说kubernetes是新一代的应用服务器(译)</title>
      <link>https://kelvinji2009.github.io/blog/why-kubernetes-is-the-new-application-server/</link>
      <pubDate>Wed, 18 Jul 2018 21:53:43 +0800</pubDate>
      
      <guid>https://kelvinji2009.github.io/blog/why-kubernetes-is-the-new-application-server/</guid>
      <description>为何说kubernetes是新一代的应用服务器 原文
你有没有想过为什么你要使用容器部署你的多平台应用程序？这只是“跟随炒作”的问题吗？在本文中，我将要问一些挑衅性的问题，以说明为什么Kubernetes是新一代的应用服务器。
您可能已经注意到大多数语言都是被interpreted并使用runtime来执行您的源代码。 理论上，大多数Node.js，Python和Ruby代码可以轻松地从一个平台（Windows，Mac，Linux）迁移到另一个平台。 Java应用程序更进一步，通过将编译后的Java类转换为字节码，能够在具有JVM（Java虚拟机）的任何地方运行。
Java生态系统提供了一种标准格式，用于分发属于同一应用程序的所有Java类。 您可以将这些类打包为包含嵌入的前端，后端和库的JAR（Java归档），WAR（Web归档）和EAR（企业归档）。 那么我问你：为什么要使用容器来分发你的Java应用程序？ 难道它不应该在环境之间轻松移植吗？
从开发人员的角度回答这个问题并不总是显而易见的。 但请考虑一下您的开发环境以及由它与生产环境之间的差异引起的一些可能问题：
 你使用的是Mac，Windows还是Linux？ 您是否遇到过与&amp;rsquo;\&amp;lsquo;vs&amp;rsquo;/&amp;lsquo;作为文件路径分隔符相关的问题？ 你使用的是什么版本的JDK？ 你是否在开发中使用Java 10，但生产使用JRE 8？ 您是否遇到过JVM差异引入的错误？ 你使用的是什么版本的应用服务器？ 生产环境是否使用相同的配置，安全补丁和库版本？ 在生产部署期间，您是否遇到过由于驱动程序或数据库服务器的版本不同而导致的JDBC驱动程序问题，而在开发环境中却没有出现？ 你有没有遇到当你要求应用服务器管理员创建一个数据源或一个JMS队列的时候，它却包含一个错误的字符？  上述所有问题都是由应用程序外部因素引起的，容器最重要的一点是您可以部署所有应用程序（例如，Linux发行版，JVM，应用程序服务器，库，配置以及您的最终应用程序）在预先构建好的容器中。 另外，执行一个内置了所有内容的容器比将代码移动到生产环境并尝试在不工作时解决差异要容易得多。 由于它很容易执行，因此将同一容器水平扩展多个副本也变得很容易。
强化你的应用 在容器变得非常流行之前，应用程序服务器提供了几个Non-functional requirement，例如安全性，隔离性，容错性，配置管理等。 做个类比，应用程序好比CD，应用程序服务器就好比是CD播放器。
作为开发人员，您将负责遵循预定义的标准，并以特定格式分发应用程序，而另一方面，应用程序服务器将“执行”您的应用程序，并提供可能因不同“品牌”而异的其他功能。 在Java世界中，应用程序服务器提供的企业功能标准最近已在Eclipse基础之下有了新的发展。 基于Eclipse Enterprise for Java（EE4JEclipse Enterprise for Java）的工作已经诞生了Jakarta EE。 （欲了解更多信息，请阅读文章Jakarta EE正式发布或观看DevNation视频Jakarta EE：Java EE的未来。）
继续CD播放器的类比，随着容器的提升，容器镜像已经成为新的CD格式。 事实上，容器镜像只不过是分发容器的格式。（如果您需要更好地处理容器镜像以及它们如何分发，请参阅容器术语的实用介绍。）
当您需要向应用程序添加企业级功能时，才能体会到容器的真正好处。 向容器化应用程序提供这些功能的最佳方式是使用Kubernetes作为它们的平台。 此外，Kubernetes平台为其他项目（如Red Hat OpenShift，Istio和Apache OpenWhisk）提供了良好的基础，可以构建和部署强大的生产级别质量的应用程序。
让我们来探索其中的九个功能：
1-服务发现 服务发现是确定如何连接到某个服务的过程。 要获得容器和云原生应用程序的诸多好处，您需要从容器镜像中隔离配置，以便在所有环境中使用相同的容器镜像。 应用程序的外部化配置是12-factor应用程序的关键原则之一。 服务发现是从运行时环境获取配置信息的方法之一，而不是在应用程序中进行硬编码。 Kubernetes提供开箱即用的服务发现。 Kubernetes还提供ConfigMaps和Secrets以从应用程序容器中隔离配置。 Secerets解决了当您需要存储凭据以连接到运行时环境中的数据库等服务时出现的一些挑战。
使用Kubernetes，不需要使用外部服务器或框架。 尽管您可以通过Kubernetes YAML文件管理每个运行时环境的环境设置，但红帽OpenShift提供了一个GUI和CLI，可以让DevOps团队更容易管理。
2-基本调用 在容器内部运行的应用程序可以通过Ingress访问进行访问 - 换句话说，就是从外部世界到您正在暴露的服务。 OpenShift使用HAProxy提供路由对象，HAProxy具有多种功能和负载均衡策略。 您可以使用路由功能进行滚动部署。 这是一些非常复杂的CI / CD策略的基础。 请参阅下面的“6 - 构建和部署管道”。</description>
    </item>
    
  </channel>
</rss>